"use strict";var cryptoLib=window.crypto||window.msCrypto,cryptoApi=cryptoLib.subtle||cryptoLib.webkitSubtle,securePRNG=cryptoLib,chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",lookup=new Uint8Array(256),OpenCrypto=function(){initB64()};function initB64(){for(var e=0;e<chars.length;e++)lookup[chars.charCodeAt(e)]=e}function encodeAb(e){var t,r=new Uint8Array(e),n=r.length,o="";for(t=0;t<n;t+=3)o+=chars[r[t]>>2],o+=chars[(3&r[t])<<4|r[t+1]>>4],o+=chars[(15&r[t+1])<<2|r[t+2]>>6],o+=chars[63&r[t+2]];return n%3==2?o=o.substring(0,o.length-1)+"=":n%3==1&&(o=o.substring(0,o.length-2)+"=="),o}function decodeAb(e){var t,r,n,o,i,a=.75*e.length,p=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var y=new ArrayBuffer(a),f=new Uint8Array(y);for(t=0;t<p;t+=4)r=lookup[e.charCodeAt(t)],n=lookup[e.charCodeAt(t+1)],o=lookup[e.charCodeAt(t+2)],i=lookup[e.charCodeAt(t+3)],f[c++]=r<<2|n>>4,f[c++]=(15&n)<<4|o>>2,f[c++]=(3&o)<<6|63&i;return y}function addNewLines(e){for(var t="";e.length>0;)t+=e.substring(0,64)+"\r\n",e=e.substring(64);return t}function removeLines(e){return e.replace(/\r?\n|\r/g,"")}function d2h(e){var t=null;return"number"==typeof e?t=e.toString(16):"string"==typeof e&&(t=(e.length/2).toString(16)),t.length%2?"0"+t:t}function toAsn1(e,t,r,n,o,i,a,p){var c={};e=p.arrayBufferToHexString(e),t=p.arrayBufferToHexString(t),r=p.arrayBufferToHexString(r);var y="06092a864886f70d01050d",f="06092a864886f70d01050c",u="02"+d2h((n=d2h(n)).length/2)+n,E=(d2h(a.length/2),"0482"+d2h(e)+e),s="04"+d2h(t)+t,h="04"+d2h(r)+r;switch(i){case"AES-GCM":256==a?c.CIPHER_OID="060960864801650304012e":192==a?c.CIPHER_OID="060960864801650304011a":128==a&&(c.CIPHER_OID="0609608648016503040106");break;case"AES-CBC":256==a?c.CIPHER_OID="060960864801650304012a":192==a?c.CIPHER_OID="0609608648016503040116":128==a&&(c.CIPHER_OID="0609608648016503040102");break;case"AES-CFB":256==a?c.CIPHER_OID="060960864801650304012c":192==a?c.CIPHER_OID="0609608648016503040118":128==a&&(c.CIPHER_OID="06086086480165030404")}switch(o){case"SHA-512":c.HASH_OID="06082a864886f70d020b0500";break;case"SHA-384":c.HASH_OID="06082a864886f70d020a0500";break;case"SHA-256":c.HASH_OID="06082a864886f70d02090500";break;case"SHA-1":c.HASH_OID="06082a864886f70d02070500"}c.SEQUENCE_AES_CONTAINER="30"+d2h(c.CIPHER_OID+h),c.SEQUENCE_HASH_CONTAINER="30"+d2h(c.HASH_OID),c.SEQUENCE_PBKDF2_INNER_CONTAINER="30"+d2h(s+u+c.SEQUENCE_HASH_CONTAINER+c.HASH_OID),c.SEQUENCE_PBKDF2_CONTAINER="30"+d2h(f+c.SEQUENCE_PBKDF2_INNER_CONTAINER+s+u+c.SEQUENCE_HASH_CONTAINER+c.HASH_OID),c.SEQUENCE_PBES2_INNER_CONTAINER="30"+d2h(c.SEQUENCE_PBKDF2_CONTAINER+f+c.SEQUENCE_PBKDF2_INNER_CONTAINER+s+u+c.SEQUENCE_HASH_CONTAINER+c.HASH_OID+c.SEQUENCE_AES_CONTAINER+c.CIPHER_OID+h),c.SEQUENCE_PBES2_CONTAINER="30"+d2h(y+c.SEQUENCE_PBES2_INNER_CONTAINER+c.SEQUENCE_PBKDF2_CONTAINER+f+c.SEQUENCE_PBKDF2_INNER_CONTAINER+s+u+c.SEQUENCE_HASH_CONTAINER+c.HASH_OID+c.SEQUENCE_AES_CONTAINER+c.CIPHER_OID+h);var d=c.SEQUENCE_PBES2_CONTAINER+y+c.SEQUENCE_PBES2_INNER_CONTAINER+c.SEQUENCE_PBKDF2_CONTAINER+f+c.SEQUENCE_PBKDF2_INNER_CONTAINER+s+u+c.SEQUENCE_HASH_CONTAINER+c.HASH_OID+c.SEQUENCE_AES_CONTAINER+c.CIPHER_OID+h,g="3082"+d2h(d+E)+d+E,A=p.hexStringToArrayBuffer(g),w=p.arrayBufferToBase64(A);return w="-----BEGIN ENCRYPTED PRIVATE KEY-----\r\n"+(w=addNewLines(w))+"-----END ENCRYPTED PRIVATE KEY-----"}function fromAsn1(e,t){var r={};e=(e=(e=removeLines(e)).replace("-----BEGIN ENCRYPTED PRIVATE KEY-----","")).replace("-----END ENCRYPTED PRIVATE KEY-----",""),e=t.base64ToArrayBuffer(e);var n=t.arrayBufferToHexString(e);r.data=n;var o="06092a864886f70d01050c",i="060960864801650304012e",a="060960864801650304011a",p="0609608648016503040106",c="060960864801650304012a",y="0609608648016503040116",f="0609608648016503040102",u="060960864801650304012c",E="0609608648016503040118",s="06086086480165030404";return r.data.includes("06092a864886f70d01050d")&&r.data.includes(o)&&(r.valid=!0),r.saltBegin=r.data.indexOf(o)+28,r.data.includes(i)?(r.cipher="AES-GCM",r.keyLength=256,r.ivBegin=r.data.indexOf(i)+24):r.data.includes(a)?(r.cipher="AES-GCM",r.keyLength=192,r.ivBegin=r.data.indexOf(a)+24):r.data.includes(p)?(r.cipher="AES-GCM",r.keyLength=128,r.ivBegin=r.data.indexOf(p)+24):r.data.includes(c)?(r.cipher="AES-CBC",r.keyLength=256,r.ivBegin=r.data.indexOf(c)+24):r.data.includes(y)?(r.cipher="AES-CBC",r.keyLength=192,r.ivBegin=r.data.indexOf(y)+24):r.data.includes(f)?(r.cipher="AES-CBC",r.keyLength=128,r.ivBegin=r.data.indexOf(f)+24):r.data.includes(u)?(r.cipher="AES-CFB",r.keyLength=256,r.ivBegin=r.data.indexOf(u)+24):r.data.includes(E)?(r.cipher="AES-CFB",r.keyLength=192,r.ivBegin=r.data.indexOf(E)+24):r.data.includes(s)&&(r.cipher="AES-CFB",r.keyLength=128,r.ivBegin=r.data.indexOf(s)+22),r.data.includes("06082a864886f70d020b")?r.hash="SHA-512":r.data.includes("06082a864886f70d020a")?r.hash="SHA-384":r.data.includes("06082a864886f70d0209")?r.hash="SHA-256":r.data.includes("06082a864886f70d0207")&&(r.hash="SHA-1"),r.saltLength=parseInt(r.data.substr(r.saltBegin,2),16),r.ivLength=parseInt(r.data.substr(r.ivBegin,2),16),r.salt=r.data.substr(r.saltBegin+2,2*r.saltLength),r.iv=r.data.substr(r.ivBegin+2,2*r.ivLength),r.iterBegin=r.saltBegin+4+2*r.saltLength,r.iterLength=parseInt(r.data.substr(r.iterBegin,2),16),r.iter=parseInt(r.data.substr(r.iterBegin+2,2*r.iterLength),16),r.sequenceLength=parseInt(r.data.substr(10,2),16),r.encryptedDataBegin=16+2*r.sequenceLength,r.encryptedDataLength=parseInt(r.data.substr(r.encryptedDataBegin,4),16),r.encryptedData=r.data.substr(r.encryptedDataBegin+4,2*r.encryptedDataLength),{salt:t.hexStringToArrayBuffer(r.salt),iv:t.hexStringToArrayBuffer(r.iv),cipher:r.cipher,keyLength:r.keyLength,hash:r.hash,iter:r.iter,encryptedData:t.hexStringToArrayBuffer(r.encryptedData)}}OpenCrypto.prototype.arrayBufferToString=function(e){if("object"!=typeof e)throw new TypeError("Expected input to be an ArrayBuffer Object");return new TextDecoder("utf-8").decode(e)},OpenCrypto.prototype.stringToArrayBuffer=function(e){if("string"!=typeof e)throw new TypeError("Expected input to be a String");return new TextEncoder("utf-8").encode(e).buffer},OpenCrypto.prototype.arrayBufferToHexString=function(e){if("object"!=typeof e)throw new TypeError("Expected input to be an ArrayBuffer Object");for(var t,r=new Uint8Array(e),n="",o=0;o<r.byteLength;o++)(t=r[o].toString(16)).length<2&&(t="0"+t),n+=t;return n},OpenCrypto.prototype.hexStringToArrayBuffer=function(e){if("string"!=typeof e)throw new TypeError("Expected input of hexString to be a String");if(e.length%2!=0)throw new RangeError("Expected string to be an even number of characters");for(var t=new Uint8Array(e.length/2),r=0;r<e.length;r+=2)t[r/2]=parseInt(e.substring(r,r+2),16);return t.buffer},OpenCrypto.prototype.arrayBufferToBase64=function(e){if("object"!=typeof e)throw new TypeError("Expected input to be an ArrayBuffer Object");return encodeAb(e)},OpenCrypto.prototype.base64ToArrayBuffer=function(e){if("string"!=typeof e)throw new TypeError("Expected input to be a base64 String");return decodeAb(e)},OpenCrypto.prototype.getKeyPair=function(e,t,r,n){e=void 0!==e?e:2048,t=void 0!==t?t:["encrypt","decrypt","wrapKey","unwrapKey"],r=void 0!==r?r:"SHA-512",n=void 0===n||n;return new Promise(function(o,i){if("number"!=typeof e)throw new TypeError("Expected input of bits to be a Number");if("object"!=typeof t)throw new TypeError("Expected input of usage to be an Array");if("string"!=typeof r)throw new TypeError("Expected input of algo expected to be a String");if("boolean"!=typeof n)throw new TypeError("Expected input of extractable to be a Boolean");cryptoApi.generateKey({name:"RSA-OAEP",modulusLength:e,publicExponent:new Uint8Array([1,0,1]),hash:{name:r}},n,t).then(function(e){o(e)}).catch(function(e){i(e)})})},OpenCrypto.prototype.cryptoPrivateToPem=function(e){var t=this;return new Promise(function(r,n){if("object"!=typeof e)throw new TypeError("Expected input to be a CryptoKey Object");cryptoApi.exportKey("pkcs8",e).then(function(e){var n=addNewLines(t.arrayBufferToBase64(e));r(n="-----BEGIN PRIVATE KEY-----\r\n"+n+"-----END PRIVATE KEY-----")}).catch(function(e){n(e)})})},OpenCrypto.prototype.pemPrivateToCrypto=function(e){var t=this;return new Promise(function(r,n){if("string"!=typeof e)throw new TypeError("Expected input of PEM to be a String");var o=(e=e.replace("-----BEGIN PRIVATE KEY-----","")).replace("-----END PRIVATE KEY-----","");o=removeLines(o);var i=t.base64ToArrayBuffer(o);cryptoApi.importKey("pkcs8",i,{name:"RSA-OAEP",hash:{name:"SHA-512"}},!0,["decrypt","unwrapKey"]).then(function(e){r(e)}).catch(function(e){n(e)})})},OpenCrypto.prototype.cryptoPublicToPem=function(e){var t=this;return new Promise(function(r,n){if("object"!=typeof e)throw new TypeError("Expected input to be a CryptoKey Object");cryptoApi.exportKey("spki",e).then(function(e){var n=addNewLines(t.arrayBufferToBase64(e));r(n="-----BEGIN PUBLIC KEY-----\r\n"+n+"-----END PUBLIC KEY-----")}).catch(function(e){n(e)})})},OpenCrypto.prototype.pemPublicToCrypto=function(e){var t=this;return new Promise(function(r,n){if("string"!=typeof e)throw new TypeError("Expected input of PEM to be a String");var o=(e=(e=removeLines(e)).replace("-----BEGIN PUBLIC KEY-----","")).replace("-----END PUBLIC KEY-----",""),i=t.base64ToArrayBuffer(o);cryptoApi.importKey("spki",i,{name:"RSA-OAEP",hash:{name:"SHA-512"}},!0,["encrypt","wrapKey"]).then(function(e){r(e)}).catch(function(e){n(e)})})},OpenCrypto.prototype.encryptPrivateKey=function(e,t,r,n,o,i){r=void 0!==r?r:64e3,n=void 0!==n?n:"SHA-512",o=void 0!==o?o:"AES-CBC",i=void 0!==i?i:256;var a=this;return new Promise(function(p,c){if("object"!=typeof e)throw new TypeError("Expected input of privateKey to be a CryptoKey Object");if("string"!=typeof t)throw new TypeError("Expected input of passphrase to be a String");if("number"!=typeof r)throw new TypeError("Expected input of iterations to be a Number");if("string"!=typeof n)throw new TypeError("Expected input of iterations to be a String");var y=null;"AES-GCM"==o?y=12:"AES-CBC"==o?y=16:"AES-CFB"==o&&(y=16);var f=securePRNG.getRandomValues(new Uint8Array(16)),u=securePRNG.getRandomValues(new Uint8Array(y));cryptoApi.importKey("raw",a.stringToArrayBuffer(t),{name:"PBKDF2"},!1,["deriveKey"]).then(function(t){cryptoApi.deriveKey({name:"PBKDF2",salt:f,iterations:r,hash:n},t,{name:o,length:i},!0,["wrapKey"]).then(function(t){cryptoApi.wrapKey("pkcs8",e,t,{name:o,iv:u}).then(function(e){var t=toAsn1(e,f,u,r,n,o,i,a);p(t)}).catch(function(e){c(e)})}).catch(function(e){c(e)})}).catch(function(e){c(e)})})},OpenCrypto.prototype.decryptPrivateKey=function(e,t){var r=this;return new Promise(function(n,o){if("string"!=typeof e)throw new TypeError("Expected input of encryptedPrivateKey to be a base64 String");if("string"!=typeof t)throw new TypeError("Expected input of passphrase to be a String");var i=fromAsn1(e,r);cryptoApi.importKey("raw",r.stringToArrayBuffer(t),{name:"PBKDF2"},!1,["deriveKey"]).then(function(e){cryptoApi.deriveKey({name:"PBKDF2",salt:i.salt,iterations:i.iter,hash:i.hash},e,{name:i.cipher,length:i.keyLength},!0,["unwrapKey"]).then(function(e){cryptoApi.unwrapKey("pkcs8",i.encryptedData,e,{name:i.cipher,iv:i.iv},{name:"RSA-OAEP",hash:{name:i.hash}},!0,["decrypt","unwrapKey"]).then(function(e){n(e)}).catch(function(e){o(e)})}).catch(function(e){o(e)})}).catch(function(e){o(e)})})},OpenCrypto.prototype.encryptPublic=function(e,t){var r=this;return new Promise(function(n,o){if("[object CryptoKey]"!==Object.prototype.toString.call(e)&&"public"!==e.type)throw new TypeError("Expected input of privateKey to be a CryptoKey of type public");if("string"!=typeof t)throw new TypeError("Expected input of data to be a String");cryptoApi.encrypt({name:"RSA-OAEP"},e,r.stringToArrayBuffer(t)).then(function(e){n(r.arrayBufferToBase64(e))}).catch(function(e){o(e)})})},OpenCrypto.prototype.decryptPrivate=function(e,t){var r=this;return new Promise(function(n,o){if("[object CryptoKey]"!==Object.prototype.toString.call(e)&&"private"!==e.type)throw new TypeError("Expected input of privateKey to be a CryptoKey of type private");if("string"!=typeof t)throw new TypeError("Expected input of encryptedData to be a String");cryptoApi.decrypt({name:"RSA-OAEP"},e,r.base64ToArrayBuffer(t)).then(function(e){n(r.arrayBufferToString(e))}).catch(function(e){o(e)})})},OpenCrypto.prototype.encryptKey=function(e,t,r){r=void 0!==r?r:"SHA-512";var n=this;return new Promise(function(o,i){if("[object CryptoKey]"!==Object.prototype.toString.call(e)&&"public"!==e.type)throw new TypeError("Expected input of publicKey to be a CryptoKey of type public");if("[object CryptoKey]"!==Object.prototype.toString.call(t)&&"secret"!==t.type)throw new TypeError("Expected input of sharedKey to be a CryptoKey of type secret");cryptoApi.wrapKey("raw",t,e,{name:"RSA-OAEP",hash:{name:r}}).then(function(e){o(n.arrayBufferToBase64(e))}).catch(function(e){i(e)})})},OpenCrypto.prototype.decryptKey=function(e,t,r,n,o,i){r=void 0!==r?r:"AES-GCM",n=void 0!==n?n:256,o=void 0!==o?o:2048,i=void 0!==i?i:"SHA-512";var a=this;return new Promise(function(p,c){if("[object CryptoKey]"!==Object.prototype.toString.call(e)&&"private"!==e.type)throw new TypeError("Expected input of privateKey to be a CryptoKey of type private");if("string"!=typeof t)throw new TypeError("Expected input of encryptedSharedKey to be a base64 String");if("string"!=typeof r)throw new TypeError("Expected input of cipherSuite to be a String");if("number"!=typeof n)throw new TypeError("Expected input of keyLength to be a Number");if("number"!=typeof o)throw new TypeError("Expected input of privateKeyLength to be a Number");if("string"!=typeof i)throw new TypeError("Expected input of privateKeyHash to be a String");cryptoApi.unwrapKey("raw",a.base64ToArrayBuffer(t),e,{name:"RSA-OAEP",modulusLength:o,publicExponent:new Uint8Array([1,0,1]),hash:{name:i}},{name:r,length:n},!0,["encrypt","decrypt"]).then(function(e){p(e)}).catch(function(e){c(e)})})},OpenCrypto.prototype.getSessionKey=function(e,t,r,n){e=void 0!==e?e:256,t=void 0!==t?t:["encrypt","decrypt","wrapKey","unwrapKey"],r=void 0===r||r,n=void 0!==n?n:"AES-GCM";return new Promise(function(o,i){if("number"!=typeof e)throw new TypeError("Expected input of bits to be a Number");if("object"!=typeof t)throw new TypeError("Expected input of usage to be an Array");if("boolean"!=typeof r)throw new TypeError("Expected input of extractable expected to be a Boolean");if("string"!=typeof n)throw new TypeError("Expected input of cipherMode expected to be a String");cryptoApi.generateKey({name:n,length:e},r,t).then(function(e){o(e)}).catch(function(e){i(e)})})},OpenCrypto.prototype.encrypt=function(e,t){var r=this;return new Promise(function(n,o){if("object"!=typeof e)throw new TypeError("Expected input of sessionKey to be a CryptoKey Object");if("string"!=typeof t)throw new TypeError("Expected input of data to be a String");var i=securePRNG.getRandomValues(new Uint8Array(12));cryptoApi.encrypt({name:"AES-GCM",iv:i,tagLength:128},e,r.base64ToArrayBuffer(t)).then(function(e){var t=r.arrayBufferToBase64(i),o=r.arrayBufferToBase64(e);n(t+o)}).catch(function(e){o(e)})})},OpenCrypto.prototype.decrypt=function(e,t){var r=this;return new Promise(function(n,o){if("object"!=typeof e)throw new TypeError("Expected input of sessionKey to be a CryptoKey Object");if("string"!=typeof t)throw new TypeError("Expected input of encryptedData to be a String");var i=t.substring(0,16),a=t.substring(16),p=r.base64ToArrayBuffer(i),c=r.base64ToArrayBuffer(a);cryptoApi.decrypt({name:"AES-GCM",iv:p,tagLength:128},e,c).then(function(e){n(r.arrayBufferToBase64(e))}).catch(function(e){o(e)})})},OpenCrypto.prototype.keyFromPassphrase=function(e,t,r,n){r=void 0!==r?r:3e5,n=void 0!==n?n:"SHA-512";var o=this;return new Promise(function(i,a){if("string"!=typeof e)throw new TypeError("Expected input of passphrase to be a String");if("string"!=typeof t)throw new TypeError("Expected input of salt to be a String");if("number"!=typeof r)throw new TypeError("Expected input of iterations to be a Number");if("string"!=typeof n)throw new TypeError("Expected input of alg to be a String");cryptoApi.importKey("raw",o.stringToArrayBuffer(e),{name:"PBKDF2"},!1,["deriveKey"]).then(function(e){cryptoApi.deriveKey({name:"PBKDF2",salt:o.stringToArrayBuffer(t),iterations:r,hash:n},e,{name:"AES-GCM",length:256},!0,["encrypt","decrypt","wrapKey","unwrapKey"]).then(function(e){cryptoApi.exportKey("raw",e).then(function(e){i(o.arrayBufferToHexString(e))}).catch(function(e){a(e)})}).catch(function(e){a(e)})}).catch(function(e){a(e)})})},OpenCrypto.prototype.cryptoKeyToFingerprint=function(e,t){t=void 0!==t?t:"SHA-1";var r=this;return new Promise(function(n,o){if("object"!=typeof e)throw new TypeError("Expected input of key to be a CryptoKey Object");if("string"!=typeof t)throw new TypeError("Expected input of hash to be a String");var i=null;i="public"==e.type?"spki":"pkcs8",cryptoApi.exportKey(i,e).then(function(e){cryptoApi.digest({name:t},e).then(function(e){n(r.arrayBufferToHexString(e).toUpperCase().replace(/(.{4})/g,"$1 ").trim())}).catch(function(e){o(e)})}).catch(function(e){o(e)})})},OpenCrypto.prototype.getRandomSalt=function(e){e=void 0!==e?e:16;var t=this;return new Promise(function(r,n){if("number"!=typeof e)throw new TypeError("Expected input of size to be a Number");var o=securePRNG.getRandomValues(new Uint8Array(e));r(t.arrayBufferToHexString(o))})},OpenCrypto.prototype.getEcKeyPair=function(e){e=void 0!==e?e:"P-256";return new Promise(function(t,r){if("string"!=typeof e)throw new TypeError("Expected input of curve to be a String");cryptoApi.generateKey({name:"ECDH",namedCurve:e},!0,["deriveKey","deriveBits"]).then(function(e){t(e)}).catch(function(e){r(e)})})};