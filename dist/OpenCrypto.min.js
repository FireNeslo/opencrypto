'use strict';var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var cryptoLib=window.crypto||window.msCrypto,cryptoApi=cryptoLib.subtle||cryptoLib.webkitSubtle,chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',lookup=new Uint8Array(256),PBES2_OID='06092a864886f70d01050d',PBKDF2_OID='06092a864886f70d01050c',AES256GCM_OID='060960864801650304012e',AES192GCM_OID='060960864801650304011a',AES128GCM_OID='0609608648016503040106',AES256CBC_OID='060960864801650304012a',AES192CBC_OID='0609608648016503040116',AES128CBC_OID='0609608648016503040102',AES256CFB_OID='060960864801650304012c',AES192CFB_OID='0609608648016503040118',AES128CFB_OID='06086086480165030404',SHA512_OID='06082a864886f70d020b0500',SHA384_OID='06082a864886f70d020a0500',SHA256_OID='06082a864886f70d02090500',SHA1_OID='06082a864886f70d02070500',RSA_OID='06092a864886f70d010101',EC_OID='06072a8648ce3d0201',P256_OID='06082a8648ce3d030107',P384_OID='06052b81040022',P521_OID='06052b81040023',OpenCrypto=function(){function a(){_classCallCheck(this,a);for(var b=0;b<chars.length;b++)lookup[chars.charCodeAt(b)]=b}return a.prototype.encodeAb=function encodeAb(b){for(var c=new Uint8Array(b),e=c.length,f='',g=0;g<e;g+=3)f+=chars[c[g]>>2],f+=chars[(3&c[g])<<4|c[g+1]>>4],f+=chars[(15&c[g+1])<<2|c[g+2]>>6],f+=chars[63&c[g+2]];return 2==e%3?f=f.substring(0,f.length-1)+'=':1==e%3&&(f=f.substring(0,f.length-2)+'=='),f},a.prototype.decodeAb=function decodeAb(b){var g,j,k,l,c=0.75*b.length,e=b.length,f=0;'='===b[b.length-1]&&(c--,'='===b[b.length-2]&&c--);for(var m=new ArrayBuffer(c),n=new Uint8Array(m),o=0;o<e;o+=4)g=lookup[b.charCodeAt(o)],j=lookup[b.charCodeAt(o+1)],k=lookup[b.charCodeAt(o+2)],l=lookup[b.charCodeAt(o+3)],n[f++]=g<<2|j>>4,n[f++]=(15&j)<<4|k>>2,n[f++]=(3&k)<<6|63&l;return m},a.prototype.arrayBufferToString=function arrayBufferToString(b){if('object'!==('undefined'==typeof b?'undefined':_typeof(b)))throw new TypeError('Expected input to be an ArrayBuffer Object');var c=new TextDecoder('utf-8');return c.decode(b)},a.prototype.stringToArrayBuffer=function stringToArrayBuffer(b){if('string'!=typeof b)throw new TypeError('Expected input to be a String');var c=new TextEncoder('utf-8'),e=c.encode(b);return e.buffer},a.prototype.arrayBufferToHexString=function arrayBufferToHexString(b){if('object'!==('undefined'==typeof b?'undefined':_typeof(b)))throw new TypeError('Expected input to be an ArrayBuffer Object');for(var c=new Uint8Array(b),e='',f=void 0,g=0;g<c.byteLength;g++)f=c[g].toString(16),2>f.length&&(f='0'+f),e+=f;return e},a.prototype.hexStringToArrayBuffer=function hexStringToArrayBuffer(b){if('string'!=typeof b)throw new TypeError('Expected input of hexString to be a String');if(0!=b.length%2)throw new RangeError('Expected string to be an even number of characters');for(var c=new Uint8Array(b.length/2),e=0;e<b.length;e+=2)c[e/2]=parseInt(b.substring(e,e+2),16);return c.buffer},a.prototype.arrayBufferToBase64=function arrayBufferToBase64(b){if('object'!==('undefined'==typeof b?'undefined':_typeof(b)))throw new TypeError('Expected input to be an ArrayBuffer Object');return this.encodeAb(b)},a.prototype.base64ToArrayBuffer=function base64ToArrayBuffer(b){if('string'!=typeof b)throw new TypeError('Expected input to be a base64 String');return this.decodeAb(b)},a.prototype.decimalToHex=function decimalToHex(b,c){c='undefined'!=typeof c&&c;var e=null;return'number'==typeof b?c?(e=b.toString(16),e.length%2?'000'+e:'00'+e):(e=b.toString(16),e.length%2?'0'+e:e):'string'==typeof b?(e=(b.length/2).toString(16),e.length%2?'0'+e:e):void 0},a.prototype.addNewLines=function addNewLines(b){for(var c='';0<b.length;)c+=b.substring(0,64)+'\r\n',b=b.substring(64);return c},a.prototype.removeLines=function removeLines(b){return b.replace(/\r?\n|\r/g,'')},a.prototype.toAsn1=function toAsn1(b,c,e,f,g,j,k){b=this.arrayBufferToHexString(b),c=this.arrayBufferToHexString(c),e=this.arrayBufferToHexString(e),f=this.decimalToHex(f,!0);var l={};'SHA-512'===g?l.HASH_OID=SHA512_OID:'SHA-384'===g?l.HASH_OID=SHA384_OID:'SHA-256'===g?l.HASH_OID=SHA256_OID:'SHA-1'===g?l.HASH_OID=SHA1_OID:void 0,'AES-GCM'===j?256===k?l.CIPHER_OID=AES256GCM_OID:192===k?l.CIPHER_OID=AES192GCM_OID:128==k&&(l.CIPHER_OID=AES128GCM_OID):'AES-CBC'===j?256===k?l.CIPHER_OID=AES256CBC_OID:192===k?l.CIPHER_OID=AES192CBC_OID:128==k&&(l.CIPHER_OID=AES128CBC_OID):'AES-CFB'===j?256===k?l.CIPHER_OID=AES256CFB_OID:192===k?l.CIPHER_OID=AES192CFB_OID:128==k&&(l.CIPHER_OID=AES128CFB_OID):void 0;var m='02'+this.decimalToHex(f.length/2)+f,n='04'+this.decimalToHex(c)+c,o='04'+this.decimalToHex(e)+e,q=2==this.decimalToHex(b).length/2?'82':'81',r='04'+q+this.decimalToHex(b)+b;l.SEQUENCE_AES_CONTAINER='30'+this.decimalToHex(l.CIPHER_OID+o),l.SEQUENCE_HASH_CONTAINER='30'+this.decimalToHex(l.HASH_OID),l.SEQUENCE_PBKDF2_INNER_CONTAINER='30'+this.decimalToHex(n+m+l.SEQUENCE_HASH_CONTAINER+l.HASH_OID),l.SEQUENCE_PBKDF2_CONTAINER='30'+this.decimalToHex(PBKDF2_OID+l.SEQUENCE_PBKDF2_INNER_CONTAINER+n+m+l.SEQUENCE_HASH_CONTAINER+l.HASH_OID),l.SEQUENCE_PBES2_INNER_CONTAINER='30'+this.decimalToHex(l.SEQUENCE_PBKDF2_CONTAINER+PBKDF2_OID+l.SEQUENCE_PBKDF2_INNER_CONTAINER+n+m+l.SEQUENCE_HASH_CONTAINER+l.HASH_OID+l.SEQUENCE_AES_CONTAINER+l.CIPHER_OID+o),l.SEQUENCE_PBES2_CONTAINER='30'+this.decimalToHex(PBES2_OID+l.SEQUENCE_PBES2_INNER_CONTAINER+l.SEQUENCE_PBKDF2_CONTAINER+PBKDF2_OID+l.SEQUENCE_PBKDF2_INNER_CONTAINER+n+m+l.SEQUENCE_HASH_CONTAINER+l.HASH_OID+l.SEQUENCE_AES_CONTAINER+l.CIPHER_OID+o);var s=l.SEQUENCE_PBES2_CONTAINER+PBES2_OID+l.SEQUENCE_PBES2_INNER_CONTAINER+l.SEQUENCE_PBKDF2_CONTAINER+PBKDF2_OID+l.SEQUENCE_PBKDF2_INNER_CONTAINER+n+m+l.SEQUENCE_HASH_CONTAINER+l.HASH_OID+l.SEQUENCE_AES_CONTAINER+l.CIPHER_OID+o,t=this.decimalToHex(s+r),v=this.hexStringToArrayBuffer('30'+q+t+s+r),w=this.arrayBufferToBase64(v);return w=this.addNewLines(w),w='-----BEGIN ENCRYPTED PRIVATE KEY-----\r\n'+w+'-----END ENCRYPTED PRIVATE KEY-----',w},a.prototype.fromAsn1=function fromAsn1(b){var c={};b=this.removeLines(b),b=b.replace('-----BEGIN ENCRYPTED PRIVATE KEY-----',''),b=b.replace('-----END ENCRYPTED PRIVATE KEY-----',''),b=this.base64ToArrayBuffer(b);var e=this.arrayBufferToHexString(b);c.data=e,c.data.includes(PBES2_OID)&&c.data.includes(PBKDF2_OID)&&(c.valid=!0),c.saltBegin=c.data.indexOf(PBKDF2_OID)+28,c.data.includes(AES256GCM_OID)?(c.cipher='AES-GCM',c.keyLength=256,c.ivBegin=c.data.indexOf(AES256GCM_OID)+24):c.data.includes(AES192GCM_OID)?(c.cipher='AES-GCM',c.keyLength=192,c.ivBegin=c.data.indexOf(AES192GCM_OID)+24):c.data.includes(AES128GCM_OID)?(c.cipher='AES-GCM',c.keyLength=128,c.ivBegin=c.data.indexOf(AES128GCM_OID)+24):c.data.includes(AES256CBC_OID)?(c.cipher='AES-CBC',c.keyLength=256,c.ivBegin=c.data.indexOf(AES256CBC_OID)+24):c.data.includes(AES192CBC_OID)?(c.cipher='AES-CBC',c.keyLength=192,c.ivBegin=c.data.indexOf(AES192CBC_OID)+24):c.data.includes(AES128CBC_OID)?(c.cipher='AES-CBC',c.keyLength=128,c.ivBegin=c.data.indexOf(AES128CBC_OID)+24):c.data.includes(AES256CFB_OID)?(c.cipher='AES-CFB',c.keyLength=256,c.ivBegin=c.data.indexOf(AES256CFB_OID)+24):c.data.includes(AES192CFB_OID)?(c.cipher='AES-CFB',c.keyLength=192,c.ivBegin=c.data.indexOf(AES192CFB_OID)+24):c.data.includes(AES128CFB_OID)&&(c.cipher='AES-CFB',c.keyLength=128,c.ivBegin=c.data.indexOf(AES128CFB_OID)+22),c.data.includes(SHA512_OID)?c.hash='SHA-512':c.data.includes(SHA384_OID)?c.hash='SHA-384':c.data.includes(SHA256_OID)?c.hash='SHA-256':c.data.includes(SHA1_OID)&&(c.hash='SHA-1'),c.saltLength=parseInt(c.data.substr(c.saltBegin,2),16),c.ivLength=parseInt(c.data.substr(c.ivBegin,2),16),c.salt=c.data.substr(c.saltBegin+2,2*c.saltLength),c.iv=c.data.substr(c.ivBegin+2,2*c.ivLength),c.iterBegin=c.saltBegin+4+2*c.saltLength,c.iterLength=parseInt(c.data.substr(c.iterBegin,2),16),c.iter=parseInt(c.data.substr(c.iterBegin+2,2*c.iterLength),16),c.sequencePadding='81'===c.data.substr(2,2)?8:10,c.encryptedDataPadding='81'===c.data.substr(2,2)?12:16,c.sequenceLength=parseInt(c.data.substr(c.sequencePadding,2),16),c.encryptedDataBegin=c.encryptedDataPadding+2*c.sequenceLength,c.encryptedDataLength=parseInt(c.data.substr(c.encryptedDataBegin,6),16),c.encryptedData=c.data.substr(c.encryptedDataBegin+4,2*c.encryptedDataLength);var f={salt:this.hexStringToArrayBuffer(c.salt),iv:this.hexStringToArrayBuffer(c.iv),cipher:c.cipher,keyLength:c.keyLength,hash:c.hash,iter:c.iter,encryptedData:this.hexStringToArrayBuffer(c.encryptedData)};return f},a.prototype.getRSAKeyPair=function getRSAKeyPair(b,c,e,f,g){return b='undefined'==typeof b?2048:b,c='undefined'==typeof c?['encrypt','decrypt','wrapKey','unwrapKey']:c,e='undefined'==typeof e?'SHA-512':e,f='undefined'==typeof f?'RSA-OAEP':f,g='undefined'==typeof g||g,new Promise(function(j,k){if('number'!=typeof b)throw new TypeError('Expected input of bits to be a Number');if('object'!==('undefined'==typeof c?'undefined':_typeof(c)))throw new TypeError('Expected input of usage to be an Array');if('string'!=typeof e)throw new TypeError('Expected input of hash expected to be a String');if('string'!=typeof f)throw new TypeError('Expected input of paddingScheme to be a String');if('boolean'!=typeof g)throw new TypeError('Expected input of extractable to be a Boolean');cryptoApi.generateKey({name:f,modulusLength:b,publicExponent:new Uint8Array([1,0,1]),hash:{name:e}},g,c).then(function(l){j(l)}).catch(function(l){k(l)})})},a.prototype.getECKeyPair=function getECKeyPair(b,c,e,f){return b='undefined'==typeof b?'P-256':b,c='undefined'==typeof c?['deriveKey','deriveBits']:c,kind='undefined'==typeof kind?'ECDH':kind,f='undefined'==typeof f||f,new Promise(function(g,j){if('string'!=typeof b)throw new TypeError('Expected input of curve to be a String');if('object'!==('undefined'==typeof c?'undefined':_typeof(c)))throw new TypeError('Expected input of usage to be an Array');if('string'!=typeof e)throw new TypeError('Expected input of type to be a String');if('boolean'!=typeof f)throw new TypeError('Expected input of extractable to be a Boolean');cryptoApi.generateKey({name:e,namedCurve:b},f,c).then(function(k){g(k)}).catch(function(k){j(k)})})},a.prototype.cryptoPrivateToPem=function cryptoPrivateToPem(b){var c=this;return new Promise(function(e,f){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'private'!==b.type)throw new TypeError('Expected input to be a CryptoKey Object');cryptoApi.exportKey('pkcs8',b).then(function(g){var j=c.arrayBufferToBase64(g),k=c.addNewLines(j);k='-----BEGIN PRIVATE KEY-----\r\n'+k+'-----END PRIVATE KEY-----',e(k)}).catch(function(g){f(g)})})},a.prototype.pemPrivateToCrypto=function pemPrivateToCrypto(b,c,e){var f=this;return c='undefined'!=typeof c&&c,e='undefined'==typeof e?'SHA-512':e,new Promise(function(g,j){if('string'!=typeof b)throw new TypeError('Expected input of PEM to be a String');if('boolean'!=typeof c)throw new TypeError('Expected input of isSingature to be a Boolean');if('string'!=typeof e)throw new TypeError('Expected input of hash to be a String');b=b.replace('-----BEGIN PRIVATE KEY-----','');var k=b.replace('-----END PRIVATE KEY-----','');k=f.removeLines(k);var l=f.base64ToArrayBuffer(k),m=f.arrayBufferToHexString(l),n=null,o=null;if(m.includes(RSA_OID))c?(n={name:'RSA-PSS',hash:{name:e}},o=['sign']):(n={name:'RSA-OAEP',hash:{name:e}},o=['unwrapKey','decrypt']);else if(m.includes(EC_OID)){var q=null;m.includes(P256_OID)?q='P-256':m.includes(P384_OID)?q='P-384':m.includes(P521_OID)&&(q='P-521'),c?(n={name:'ECDSA',namedCurve:q},o=['sign']):(n={name:'ECDH',namedCurve:q},o=['deriveKey','deriveBits'])}cryptoApi.importKey('pkcs8',l,n,!0,o).then(function(r){g(r)}).catch(function(r){j(r)})})},a.prototype.cryptoPublicToPem=function cryptoPublicToPem(b){var c=this;return new Promise(function(e,f){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'public'!==b.type)throw new TypeError('Expected input to be a CryptoKey Object');cryptoApi.exportKey('spki',b).then(function(g){var j=c.arrayBufferToBase64(g),k=c.addNewLines(j);k='-----BEGIN PUBLIC KEY-----\r\n'+k+'-----END PUBLIC KEY-----',e(k)}).catch(function(g){f(g)})})},a.prototype.pemPublicToCrypto=function pemPublicToCrypto(b,c,e){var f=this;return c='undefined'!=typeof c&&c,e='undefined'==typeof e?'SHA-512':e,new Promise(function(g,j){if('string'!=typeof b)throw new TypeError('Expected input of PEM to be a String');if('boolean'!=typeof c)throw new TypeError('Expected input of isSingature to be a Boolean');if('string'!=typeof e)throw new TypeError('Expected input of hash to be a String');b=f.removeLines(b),b=b.replace('-----BEGIN PUBLIC KEY-----','');var k=b.replace('-----END PUBLIC KEY-----',''),l=f.base64ToArrayBuffer(k),m=f.arrayBufferToHexString(l),n=null,o=null;if(m.includes(RSA_OID))c?(n={name:'RSA-PSS',hash:{name:e}},o=['verify']):(n={name:'RSA-OAEP',hash:{name:e}},o=['wrapKey','encrypt']);else if(m.includes(EC_OID)){var q=null;m.includes(P256_OID)?q='P-256':m.includes(P384_OID)?q='P-384':m.includes(P521_OID)&&(q='P-521'),c?(n={name:'ECDSA',namedCurve:q},o=['verify']):(n={name:'ECDH',namedCurve:q},o=[])}cryptoApi.importKey('spki',l,n,!0,o).then(function(r){g(r)}).catch(function(r){j(r)})})},a.prototype.encryptPrivateKey=function encryptPrivateKey(b,c,e,f,g,j){e='undefined'==typeof e?64000:e,f='undefined'==typeof f?'SHA-512':f,g='undefined'==typeof g?'AES-CBC':g,j='undefined'==typeof j?256:j;var k=this;return new Promise(function(l,m){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'private'!==b.type)throw new TypeError('Expected input of privateKey to be a CryptoKey Object');if('string'!=typeof c)throw new TypeError('Expected input of passphrase to be a String');if('number'!=typeof e)throw new TypeError('Expected input of iterations to be a Number');if('string'!=typeof f)throw new TypeError('Expected input of hash to be a String');if('string'!=typeof g)throw new TypeError('Expected input of cipher to be a String');if('number'!=typeof j)throw new TypeError('Expected input of keyLength to be a Number');var n=null;'AES-GCM'===g?n=12:'AES-CBC'===g?n=16:'AES-CFB'==g&&(n=16);var o=cryptoLib.getRandomValues(new Uint8Array(16)),q=cryptoLib.getRandomValues(new Uint8Array(n));cryptoApi.importKey('raw',k.stringToArrayBuffer(c),{name:'PBKDF2'},!1,['deriveKey']).then(function(r){cryptoApi.deriveKey({name:'PBKDF2',salt:o,iterations:e,hash:f},r,{name:g,length:j},!0,['wrapKey']).then(function(s){cryptoApi.wrapKey('pkcs8',b,s,{name:g,iv:q}).then(function(t){var u=k.toAsn1(t,o,q,e,f,g,j);l(u)}).catch(function(t){m(t)})}).catch(function(s){m(s)})}).catch(function(r){m(r)})})},a.prototype.decryptPrivateKey=function decryptPrivateKey(b,c,e,f){var g=this.fromAsn1(b);e='undefined'==typeof e?{name:'RSA-OAEP',hash:{name:'SHA-512'}}:e,f='undefined'==typeof f?['decrypt','unwrapKey']:f;var j=this;return new Promise(function(k,l){if('string'!=typeof b)throw new TypeError('Expected input of encryptedPrivateKey to be a base64 String');if('string'!=typeof c)throw new TypeError('Expected input of passphrase to be a String');if('object'!==('undefined'==typeof e?'undefined':_typeof(e)))throw new TypeError('Expected input of options to be an Object');if('object'!==('undefined'==typeof f?'undefined':_typeof(f)))throw new TypeError('Expected input of usage to be an Array');cryptoApi.importKey('raw',j.stringToArrayBuffer(c),{name:'PBKDF2'},!1,['deriveKey']).then(function(m){cryptoApi.deriveKey({name:'PBKDF2',salt:g.salt,iterations:g.iter,hash:g.hash},m,{name:g.cipher,length:g.keyLength},!0,['unwrapKey']).then(function(n){cryptoApi.unwrapKey('pkcs8',g.encryptedData,n,{name:g.cipher,iv:g.iv},e,!0,f).then(function(o){k(o)}).catch(function(o){l(o)})}).catch(function(n){l(n)})}).catch(function(m){l(m)})})},a.prototype.rsaEncrypt=function rsaEncrypt(b,c){var e=this;return new Promise(function(f,g){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'public'!==b.type)throw new TypeError('Expected input of privateKey to be a CryptoKey of type public');if('object'!==('undefined'==typeof c?'undefined':_typeof(c)))throw new TypeError('Expected input of data to be an ArrayBuffer');cryptoApi.encrypt({name:'RSA-OAEP'},b,c).then(function(j){f(e.arrayBufferToBase64(j))}).catch(function(j){g(j)})})},a.prototype.rsaDecrypt=function rsaDecrypt(b,c){var e=this;return new Promise(function(f,g){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'private'!==b.type)throw new TypeError('Expected input of privateKey to be a CryptoKey of type private');if('string'!=typeof c)throw new TypeError('Expected input of encryptedData to be a String');cryptoApi.decrypt({name:'RSA-OAEP'},b,e.base64ToArrayBuffer(c)).then(function(j){f(e.arrayBufferToString(j))}).catch(function(j){g(j)})})},a.prototype.encryptKey=function encryptKey(b,c,e){e='undefined'==typeof e?'SHA-512':e;var f=this;return new Promise(function(g,j){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'public'!==b.type)throw new TypeError('Expected input of publicKey to be a CryptoKey of type public');if('[object CryptoKey]'!==Object.prototype.toString.call(c)&&'secret'!==c.type)throw new TypeError('Expected input of sharedKey to be a CryptoKey of type secret');if('string'!=typeof e)throw new TypeError('Expected input of publicKeyHash to be a String');cryptoApi.wrapKey('raw',c,b,{name:'RSA-OAEP',hash:{name:e}}).then(function(k){g(f.arrayBufferToBase64(k))}).catch(function(k){j(k)})})},a.prototype.decryptKey=function decryptKey(b,c,e,f,g,j){e='undefined'==typeof e?'AES-GCM':e,f='undefined'==typeof f?256:f,g='undefined'==typeof g?2048:g,j='undefined'==typeof j?'SHA-512':j;var k=this;return new Promise(function(l,m){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'private'!==b.type)throw new TypeError('Expected input of privateKey to be a CryptoKey of type private');if('string'!=typeof c)throw new TypeError('Expected input of encryptedSharedKey to be a base64 String');if('string'!=typeof e)throw new TypeError('Expected input of cipherSuite to be a String');if('number'!=typeof f)throw new TypeError('Expected input of keyLength to be a Number');if('number'!=typeof g)throw new TypeError('Expected input of privateKeyLength to be a Number');if('string'!=typeof j)throw new TypeError('Expected input of privateKeyHash to be a String');cryptoApi.unwrapKey('raw',k.base64ToArrayBuffer(c),b,{name:'RSA-OAEP',modulusLength:g,publicExponent:new Uint8Array([1,0,1]),hash:{name:j}},{name:e,length:f},!0,['encrypt','decrypt']).then(function(n){l(n)}).catch(function(n){m(n)})})},a.prototype.sign=function sign(b,c){var e=this;return new Promise(function(f,g){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'private'!==b.type)throw new TypeError('Expected input of privateKey to be a CryptoKey Object');if('object'!==('undefined'==typeof c?'undefined':_typeof(c)))throw new TypeError('Expected input of data to be an ArrayBuffer');cryptoApi.sign({name:'RSA-PSS',saltLength:128},b,c).then(function(j){var k=e.arrayBufferToBase64(j);f(k)}).catch(function(j){g(j)})})},a.prototype.verify=function verify(b,c,e){var f=this;return new Promise(function(g,j){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'public'!==b.type)throw new TypeError('Expected input of publicKey to be a CryptoKey Object');if('string'!=typeof c)throw new TypeError('Expected input of signature to be a base64 String');if('object'!==('undefined'==typeof e?'undefined':_typeof(e)))throw new TypeError('Expected input of data to be an ArrayBuffer');cryptoApi.verify({name:'RSA-PSS',saltLength:128},b,f.base64ToArrayBuffer(c),e).then(function(k){g(k)}).catch(function(k){j(k)})})},a.prototype.getSharedKey=function getSharedKey(b,c,e,f){return b='undefined'==typeof b?256:b,c='undefined'==typeof c?['encrypt','decrypt','wrapKey','unwrapKey']:c,e='undefined'==typeof e||e,f='undefined'==typeof f?'AES-GCM':f,new Promise(function(g,j){if('number'!=typeof b)throw new TypeError('Expected input of bits to be a Number');if('object'!==('undefined'==typeof c?'undefined':_typeof(c)))throw new TypeError('Expected input of usage to be an Array');if('boolean'!=typeof e)throw new TypeError('Expected input of extractable expected to be a Boolean');if('string'!=typeof f)throw new TypeError('Expected input of cipherMode expected to be a String');cryptoApi.generateKey({name:f,length:b},e,c).then(function(k){g(k)}).catch(function(k){j(k)})})},a.prototype.encrypt=function encrypt(b,c){var e=this;return new Promise(function(f,g){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'secret'!==b.type)throw new TypeError('Expected input of sharedKey to be a CryptoKey Object');if('object'!==('undefined'==typeof c?'undefined':_typeof(c)))throw new TypeError('Expected input of data to be an ArrayBuffer');var j=cryptoLib.getRandomValues(new Uint8Array(12));cryptoApi.encrypt({name:'AES-GCM',iv:j,tagLength:128},b,c).then(function(k){var l=e.arrayBufferToBase64(j),m=e.arrayBufferToBase64(k);f(l+m)}).catch(function(k){g(k)})})},a.prototype.decrypt=function decrypt(b,c){var e=this;return new Promise(function(f,g){if('[object CryptoKey]'!==Object.prototype.toString.call(b)&&'secret'!==b.type)throw new TypeError('Expected input of sharedKey to be a CryptoKey Object');if('string'!=typeof c)throw new TypeError('Expected input of encryptedData to be a String');var j=c.substring(0,16),k=c.substring(16),l=e.base64ToArrayBuffer(j),m=e.base64ToArrayBuffer(k);cryptoApi.decrypt({name:'AES-GCM',iv:l,tagLength:128},b,m).then(function(n){f(e.arrayBufferToBase64(n))}).catch(function(n){g(n)})})},a.prototype.keyFromPassphrase=function keyFromPassphrase(b,c,e,f){e='undefined'==typeof e?64000:e,f='undefined'==typeof f?'SHA-512':f;var g=this;return new Promise(function(j,k){if('string'!=typeof b)throw new TypeError('Expected input of passphrase to be a String');if('string'!=typeof c)throw new TypeError('Expected input of salt to be a String');if('number'!=typeof e)throw new TypeError('Expected input of iterations to be a Number');if('string'!=typeof f)throw new TypeError('Expected input of hash to be a String');cryptoApi.importKey('raw',g.stringToArrayBuffer(b),{name:'PBKDF2'},!1,['deriveKey']).then(function(l){cryptoApi.deriveKey({name:'PBKDF2',salt:g.stringToArrayBuffer(c),iterations:e,hash:f},l,{name:'AES-GCM',length:256},!0,['encrypt','decrypt','wrapKey','unwrapKey']).then(function(m){cryptoApi.exportKey('raw',m).then(function(n){j(g.arrayBufferToHexString(n))}).catch(function(n){k(n)})}).catch(function(m){k(m)})}).catch(function(l){k(l)})})},a.prototype.cryptoKeyToFingerprint=function cryptoKeyToFingerprint(b,c){c='undefined'==typeof c?'SHA-1':c;var e=this;return new Promise(function(f,g){if('[object CryptoKey]'!==Object.prototype.toString.call(b))throw new TypeError('Expected input of key to be a CryptoKey Object');if('string'!=typeof c)throw new TypeError('Expected input of hash to be a String');var j=null;j='public'===b.type?'spki':'pkcs8',cryptoApi.exportKey(j,b).then(function(k){cryptoApi.digest({name:c},k).then(function(l){f(e.arrayBufferToHexString(l).toUpperCase().replace(/(.{4})/g,'$1 ').trim())}).catch(function(l){g(l)})}).catch(function(k){g(k)})})},a.prototype.getRandomSalt=function getRandomSalt(b){b='undefined'==typeof b?16:b;var c=this;return new Promise(function(e){if('number'!=typeof b)throw new TypeError('Expected input of size to be a Number');var g=cryptoLib.getRandomValues(new Uint8Array(b)),j=c.arrayBufferToHexString(g);e(j)})},a}();